html {
    height: 100%;
}

body {
    height: 100%;
    margin: 0;
    padding: 0;
    /* Flexbox */
    display: flex;
    flex-direction: column;
    align-items: center;
    /* Other */
    text-align: center;
}

header {
    width: 100%;
    height: 100%;
    padding: 1em;
    padding-bottom: 2em;
    background: white;
    z-index: 10;
}

nav {
    margin: 1em;
    margin-bottom: 10em;
}

main {
    position: relative;
    margin: 1em;
}

footer {
    width: 100%;
    padding: 1em;
    background: white;
    z-index: 10;
}

/* -- Timeline -- */
/* Used tutorial from:
https://webdesign.tutsplus.com/tutorials/building-a-vertical-timeline-with-css-and-a-touch-of-javascript--cms-26528 */
/* Uses each list element to create a vertical line */
/* .timeline-list li { */
.timeline-event {
    list-style-type: none; /* Get rid of default list styling */
    position: relative;
    text-align: left;

    /* Creates vertical line */
    width: 8px; /* Make thin so it looks like a line */
    margin: 0 auto; /* Make first element touch top of parent el and center it */
    padding-top: 2em;
    padding-bottom: 2em;
    border: 0px solid blue;
    border-left-width: 30px;
    border-right-width: 30px;
    /* background: blue; */
    /* clip-path: inset(0 0 0 0); */
    background: transparent;
}

/* Create the circle markers on timeline */
/* Comments explain what each css pair does to pseudo-element after the list item (LI/timeline-event) step-by-step */
/* .timeline-list li::after { */
.timeline-event::after {
    content: '';
    /* Move origin top-left of 'parent element' (LI) instead of after the LI*/
    position: absolute;
    left: 50%; /* Moves and aligns left side of pseuo-el to center of LI*/
    bottom: 2em; /* Move to bottom of LI*/
    transform: translateX(-50%); /* Makes center of pseudo-element the center of the LI */
    width: 30px;
    height: 30px; /* Becomes a 30x30px box */
    border-radius: 50%; /* Makes circle */
    border: 2px solid white;
    background: white;
    transition: background 0.5s ease-in-out;
}

/* .timeline-list li.in-view::after { */
.timeline-event.in-view::after {
    background: transparent;
}

/* Create the timeline-event text boxes */
/* .timeline-list li div { */
.timeline-event div {
    position: relative;
    /* Hide on load */
    visibility: hidden;
    opacity: 0;
    bottom: 0;
    /* No change? */
    width: 400px;
    padding: 1em; /* Ball stays aligned with bottom of div content */
    border: 2px solid pink;
    background: pink;
    transition: all 0.5s ease-in-out;
    /* transform: translate3d(0, 0, 0); */
}

/* Adds a pseudo-element right after opening tag of div inside the timeline-event */
/* .timeline-list li div::before { */
.timeline-event div::before {
    content: '';
    position: absolute; /* Move origin to top-left of div (inner div, does not include padding) */
    bottom: 7px; /* Set bottom 7px above bottom of div */
    width: 0;
    height: 0;
    border-style: solid; /* Looks like little dot now*/
}

/* Move the div content of timeline-event to right side if odd */
.timeline-list li:nth-child(odd) div {
    left: 45px;
    transform: translate3d(200px, 0, 0);
}

/* Create triangles */
/* How it works: https://stackoverflow.com/questions/7073484/how-do-css-triangles-work */
.timeline-list li:nth-child(odd) div::before {
    left: -15px;
    border-width: 8px 16px 8px 0; /* Make triangle pointing left */
    border-color: transparent pink transparent transparent;
}


/* Move the div content of timeline-event to left side if even */
.timeline-list li:nth-child(even) div {
    left: -471px;
    transform: translate3d(-200px, 0, 0);
}

/* Creates triangle */
.timeline-list li:nth-child(even) div::before {
    right: -15px;
    border-width: 8px 0 8px 16px; /* Make triangle pointing right */
    border-color: transparent transparent transparent pink;
}

.timeline-list li.in-view div {
/* .timeline-event.in-view div { Even though selectors are same, more specific one gets applied last,
    so the n-th child selector gets applied last and animation doesn't work right */
    transform: none;
    visibility: visible;
    opacity: 1;
}

/* Vertical line stem */
.stem-wrapper {
    text-align: center;
    position: fixed;
    top: 0;
    bottom: 0;
    left: 50%;
    z-index: 5;
    /* background: red; */
    border: 2px solid red;
}

.visible-stem {
    height: 50%;
}